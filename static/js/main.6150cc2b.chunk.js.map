{"version":3,"sources":["AppContext.js","TodoList.js","TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","AppProvider","children","useReducer","state","action","type","todoList","activeToDoItem","todo","id","appData","appDispatch","Provider","value","TodoList","useState","loading","setLoading","useContext","useEffect","axios","get","then","resp","data","slice","map","item","title","key","to","data-testid","TodoItem","useParams","completed","userId","className","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qSAEaA,EAAaC,IAAMC,cAAc,IAEjCC,EAAc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAYZH,IAAMI,YAXrB,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,gBACH,OAAO,eAAKF,EAAZ,CAAmBG,SAAUF,EAAOE,WACtC,IAAK,mBACH,OAAO,eAAKH,EAAZ,CAAmBI,eAAgBH,EAAOI,OAC5C,QACE,OAAOL,KAI4C,CACvDG,SAAU,GACVC,eAAgB,CAAEE,GAAI,KAdmB,mBAYpCC,EAZoC,KAY3BC,EAZ2B,KAiB3C,OACE,kBAACd,EAAWe,SAAZ,CAAqBC,MAAO,CAAEH,UAASC,gBACpCV,ICfMa,EAAW,WAAO,IAAD,EACEhB,IAAMiB,UAAS,GADjB,mBACrBC,EADqB,KACZC,EADY,OAEKnB,IAAMoB,WAAWrB,GAA1Ca,EAFoB,EAEpBA,QAASC,EAFW,EAEXA,YAUjB,OARAb,IAAMqB,WAAU,WACdC,IAAMC,IAAI,8CAA8CC,MAAK,SAACC,GAAU,IAC9DC,EAASD,EAATC,KACRb,EAAY,CAAEN,KAAM,gBAAiBC,SAAUkB,IAC/CP,GAAW,QAEZ,CAACN,EAAaM,IAGf,6BACGD,EACC,6CAEA,4BACGN,EAAQJ,SAASmB,MAAM,EAAG,IAAIC,KAAI,SAACC,GAAU,IACpClB,EAAckB,EAAdlB,GAAImB,EAAUD,EAAVC,MACZ,OACE,wBAAIC,IAAKpB,GACP,kBAAC,IAAD,CAAMqB,GAAE,gBAAWrB,GAAMsB,cAAatB,GACnCmB,UCvBNI,EAAW,WAAO,IACrBvB,EAAOwB,cAAPxB,GADoB,EAGEX,IAAMiB,UAAS,GAHjB,mBAGrBC,EAHqB,KAGZC,EAHY,OAQxBnB,IAAMoB,WAAWrB,GAFRU,EANe,EAM1BG,QAAWH,eACXI,EAP0B,EAO1BA,YAGMiB,EAA6BrB,EAA7BqB,MAAOM,EAAsB3B,EAAtB2B,UAAWC,EAAW5B,EAAX4B,OAY1B,OAVArC,IAAMqB,WAAU,WACdC,IACGC,IADH,qDACqDZ,IAClDa,MAAK,SAACC,GAAU,IACPC,EAASD,EAATC,KACRb,EAAY,CAAEN,KAAM,mBAAoBG,KAAMgB,IAC9CP,GAAW,QAEd,CAACR,EAAIE,IAGN,yBAAKyB,UAAU,oBACZpB,EACC,iDAAuBP,GAEvB,6BACE,wBAAI2B,UAAU,cAAcR,GAC5B,yCAAeO,GACdD,EACC,uBAAGE,UAAU,aAAb,gCAEA,uBAAGA,UAAU,iBAAb,uCCjBGC,MAjBf,WACE,OACE,yBAAKD,UAAU,OACb,4BAAQA,UAAU,cAChB,2EAGF,yBAAKA,UAAU,YACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,YAAYC,UAAWP,IACnC,kBAAC,IAAD,CAAOQ,OAAK,EAACF,KAAK,IAAIC,UAAWzB,QCLvB2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6150cc2b.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const AppContext = React.createContext({});\n\nexport const AppProvider = ({ children }) => {\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case \"LOAD_TODOLIST\":\n        return { ...state, todoList: action.todoList };\n      case \"LOAD_SINGLE_TODO\":\n        return { ...state, activeToDoItem: action.todo };\n      default:\n        return state;\n    }\n  };\n\n  const [appData, appDispatch] = React.useReducer(reducer, {\n    todoList: [],\n    activeToDoItem: { id: 0 },\n  });\n\n  return (\n    <AppContext.Provider value={{ appData, appDispatch }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport { AppContext } from \"./AppContext\";\n\nexport const TodoList = () => {\n  const [loading, setLoading] = React.useState(true);\n  const { appData, appDispatch } = React.useContext(AppContext);\n\n  React.useEffect(() => {\n    axios.get(\"https://jsonplaceholder.typicode.com/todos\").then((resp) => {\n      const { data } = resp;\n      appDispatch({ type: \"LOAD_TODOLIST\", todoList: data });\n      setLoading(false);\n    });\n  }, [appDispatch, setLoading]);\n\n  return (\n    <div>\n      {loading ? (\n        <p>Fetching todos</p>\n      ) : (\n        <ul>\n          {appData.todoList.slice(0, 15).map((item) => {\n            const { id, title } = item;\n            return (\n              <li key={id}>\n                <Link to={`/item/${id}`} data-testid={id}>\n                  {title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport { AppContext } from \"./AppContext\";\n\nexport const TodoItem = () => {\n  const { id } = useParams();\n\n  const [loading, setLoading] = React.useState(true);\n\n  const {\n    appData: { activeToDoItem },\n    appDispatch,\n  } = React.useContext(AppContext);\n\n  const { title, completed, userId } = activeToDoItem;\n\n  React.useEffect(() => {\n    axios\n      .get(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then((resp) => {\n        const { data } = resp;\n        appDispatch({ type: \"LOAD_SINGLE_TODO\", todo: data });\n        setLoading(false);\n      });\n  }, [id, appDispatch]);\n\n  return (\n    <div className=\"single-todo-item\">\n      {loading ? (\n        <p>Fetching todo item {id}</p>\n      ) : (\n        <div>\n          <h2 className=\"todo-title\">{title}</h2>\n          <h4>Added by: {userId}</h4>\n          {completed ? (\n            <p className=\"completed\">This item has been completed</p>\n          ) : (\n            <p className=\"not-completed\">This item is yet to be completed</p>\n          )}\n\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { TodoList } from \"./TodoList\";\nimport { TodoItem } from \"./TodoItem\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Getting started with React testing library</h2>\n      </header>\n\n      <div className=\"App-body\">\n        <BrowserRouter>\n          <Route path=\"/item/:id\" component={TodoItem} />\n          <Route exact path=\"/\" component={TodoList} />\n        </BrowserRouter>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { AppProvider } from \"./AppContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}